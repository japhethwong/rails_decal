PROJECT 1 QUESTIONS
===================
Japheth Wong | Ruby on Rails Decal
 
Question 0: Why is this error being thrown?

This error is being thrown because we have not created a Pokemon model yet.

Question 1: How are the random Pokemon appearing? What is the common factor between all the possible Pokemon that appear?

In HomeController's index method, we query for all Pokemon which do not have a trainer assigned to them (aka a 'wild Pokemon').  We then randomly sample from these Pokemon as @pokemon, which is then displayed in the associated view.  The common attribute between these Pokemon is that they do not have a trainer assigned to them.
 
Question 2a: What does the following line in the help text do? Be specific about what "capture_path(id: @pokemon)" is doing. If you're having trouble, look at the Help section in the README.

The specified line is sets the button's action.  When the button is pressed, a request will be made to the URI pattern which matches the prefix "capture", and binds the Pokemon instance in the view to id as part of the request.  In our controller, this gives us access to the appropriate Pokemon ID in our params hashmap.
 
Question 3: What would you name your own Pokemon?

To highlight my lack of creativity... how about something like 'NinjaBuster'?  It'll be stealthy but also have a variety of attacks in its arsenal of weapons.
 
Question 4: What did you pass into the redirect_to? If it is a path, what did that path need? If it is not a path, why is it okay not to have a path here?

I passed in the instance of trainer that is associated with the Pokemon.  Rails has black magic that will match it up with the route for trainer, and automatically bind the ID of the @trainer instance into the params.
 
Question 5: Explain how putting this line "flash[:error] = @pokemon.errors.full_messages.to_sentence" shows error messages on your form.

@pokemon.errors.full_messages.to_sentence retrieves the errors associated from failing validation checks on the model.  This is then placed into the flash hashmap, under the key :error, which can be accessed in the view.  Note that flash only persists for the duration of the request; once a new request is issued, it should be cleared.

There is a snippet of code in views/layouts/_messages.html.erb which is called from within views/layouts/application.html.erb: this is the <%= renders "layouts/messages" %> tag.  This adds that predefined layout onto our page when it is rendered to the user.
 
Give us feedback on the project and decal!

Good project.  There seems to be a slight bug in the skeleton code whereby the trainer's name isn't saved.

 
Link to your GitHub repo.
https://github.com/japhethwong/rails_decal
 
Extra credit: Link your Heroku deployed app
https://pokeportal.herokuapp.com/ 
